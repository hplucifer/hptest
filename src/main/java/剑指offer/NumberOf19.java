package 剑指offer;

public class NumberOf19 {
    /*
    位运算
    题10：二进制中1的个数
    请实现一个函数，输入一个整数，输出该数二进制表示中1的个数，例如把9表示称1001，输出2。
     */

    /**
     * 首先想到的是将二进制不断右移，统计右移次数（把整数右移一位和把整数除以2是等价的，但是除法效率比位移要低），但是如果
     * 输入的数是负数（负数用补码，最高位是1）,一直右移，最终会变成0xFFF...成为死循环
     * 如果对二进制从右开始和1（左移）与操作（1，10，100。。。。。。），但是这样也是有很大的弊端，因为这个flag这个总是左移。
     * 当将这个传进来的n的所有位都&完了，这个flag还会继续左移，直到将这个1左移到这个int类型的最高位，表示一个负数，
     * 然后将这个1移到最高表示位的左边，这个flag才会表示0这个while循环才会结束
     */

    /**
     * 解法：把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变为0，那么一个整数的二进制中有多少个1，就可以进行
     * 多少次这样的操作
     */
    public static int numberOf1(int n) {
        int count = 0;
        while (n != 0) {
            count++;
            n = (n - 1) & n;
        }
        return count;
    }
}
